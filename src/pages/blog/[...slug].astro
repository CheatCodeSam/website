---
import { Image } from '@astrojs/image/components';
import { getCollection } from 'astro:content';
import Tag from '../../components/Tag.astro';
import TimeLabel from '../../components/TimeLabel.svelte';
import BasePageLayout from '../../layouts/BasePageLayout.astro';
import { getDescriptionFromText, localOrRemoteSrcToUrl, slugToRoute } from '../../utils';

const { slug } = Astro.params;
const posts = await getCollection<'blog'>('blog');
const postIndex = posts.findIndex(({ data }) => data.id === +slug!.split('/')[0]);
const [prevPost, post, nextPost] = [posts[postIndex - 1], posts[postIndex], posts[postIndex + 1]];

if (!post) {
  return Astro.redirect('/blog/404?redirectedFrom=' + slug);
}

if (post.slug.split('/')[1].slice(post.slug.split('/')[1].indexOf('-') + 1) !== slug?.split('/')[1]) {
  return Astro.redirect(slugToRoute(post?.slug, 'blog'));
}

const { Content, headings, remarkPluginFrontmatter } = await post.render();
const { title, description, tags, thumbnail, createdAt } = post.data;
const currUrl = new URL(Astro.request.url);
const imgSrc = thumbnail?.src ? localOrRemoteSrcToUrl(currUrl, thumbnail?.src).toString() : undefined;
---

<BasePageLayout
  title={title + ' - Joona Aalto'}
  metaDescription={description ?? getDescriptionFromText(post.body, 160)}
  metaKeywords={tags}
  metaImageSrc={imgSrc}
>
  {
    headings.length > 0 && (
      <div class="toc">
        <span class="toc-title">Table of contents</span>
        <ul>
          {headings.map((heading) => (
            <li class={`toc-depth-${heading.depth}`}>
              <a href={`${slugToRoute(post?.slug, 'blog')}#${heading.slug}`}>{heading.text}</a>
            </li>
          ))}
        </ul>
      </div>
    )
  }

  <article class="blog-post">
    <header>
      <div class="date-and-reading-time">
        <TimeLabel
          className="created-date"
          date={createdAt}
          yearFormat={'numeric'}
          monthFormat={'long'}
          dayFormat={'numeric'}
        />

        <span class="reading-time"
          >{
            remarkPluginFrontmatter.minutesRead >= 1
              ? Math.ceil(remarkPluginFrontmatter.minutesRead) + ' minute read'
              : Math.round(remarkPluginFrontmatter.minutesRead * 60) + ' second read'
          }</span
        >
      </div>

      <h1 class="title">{title}</h1>

      {description && <p class="description">{description}</p>}

      {
        tags && (
          <ul class="tags">
            {tags.map((tag) => (
              <li class="tags-item">
                <Tag name={tag} type="blog" />
              </li>
            ))}
          </ul>
        )
      }

      {
        thumbnail && (
          <Image
            class="thumbnail"
            src={thumbnail.src}
            alt={thumbnail.alt}
            width={thumbnail.width}
            height={thumbnail.height}
            aspectRatio={`${thumbnail.width}:${thumbnail.height}`}
            format={thumbnail.format}
          />
        )
      }
    </header>

    <main class="post-content">
      <Content />
    </main>
  </article>

  <div class="prev-and-next-posts">
    {
      prevPost && (
        <a class="prev-post" href={slugToRoute(prevPost.slug, 'blog')}>
          <span>← Previous post</span>
          {prevPost.data.title}
        </a>
      )
    }

    {
      nextPost && (
        <a class="next-post" href={slugToRoute(nextPost.slug, 'blog')}>
          <span>Next post →</span>
          {nextPost.data.title}
        </a>
      )
    }
  </div>
</BasePageLayout>

<style lang="scss" is:global>
  $articleWidth: 50rem;
  $tocItemLeftPadding: 0.5rem;

  .toc {
    position: fixed;
    left: calc((100vw - (100vw - $articleWidth) / 2 - $tocItemLeftPadding));
    top: 6rem;
    right: 1.5rem;
    max-width: 25rem;

    .toc-title {
      display: block;
      margin-bottom: 0.5rem;
      padding-left: $tocItemLeftPadding;
      font-size: 1.1em;
      font-weight: bold;
      color: var(--text-color-2);
    }

    ul {
      display: flex;
      flex-direction: column;
      gap: 0.2rem;
      padding: 0;
      margin: 0;
      list-style: none;

      a {
        text-decoration: none;
        color: var(--text-color-2);
        opacity: 0.6;
        background-color: transparent;
        display: block;
        border-radius: 0.4rem;
        padding: 0.2rem $tocItemLeftPadding;
        transition: 100ms;

        &:hover {
          opacity: 1;
          background-color: rgba(var(--text-color-2-rgb), 0.1);
        }
      }

      .toc-depth-1 {
        font-weight: bold;
      }

      .toc-depth-3 {
        padding-left: 1.5rem;
      }

      .toc-depth-4 {
        padding-left: 3rem;
      }
    }
  }

  article.blog-post {
    max-width: $articleWidth;
    width: 100%;
    padding: 0 1.5rem 1.5rem 1.5rem;
    box-sizing: border-box;
    margin: auto;

    .date-and-reading-time {
      padding-top: 2rem;
      padding-bottom: 0.5rem;
      display: flex;
      gap: 1.5rem;
      color: var(--text-color-2);

      .created-date,
      .reading-time {
        font-family: 'Fira Code';
        font-size: 1em;
      }
    }

    :last-child {
      margin-bottom: 0;
    }

    h1.title {
      margin: 0 0 0.5rem 0;
      font-size: 2em;
      width: fit-content;
      background: -webkit-linear-gradient(45deg, var(--accent-1), var(--accent-2));
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .thumbnail {
      display: block;
      width: 100%;
      height: auto;
      margin: 1rem 0;
      border-radius: 0.9rem;
    }

    h2 {
      color: var(--accent-1);
    }

    h3 {
      color: var(--accent-2);
    }

    ul.tags {
      display: flex;
      padding: 0;
      margin: 0.5rem 0;
      gap: 2ch;
      flex-wrap: wrap;

      li.tags-item {
        list-style: none;
        padding: 0;
        margin: 0;
      }
    }

    p.description {
      font-size: 1.1em;
      color: var(--text-color-2);
      padding: 0;
      margin: 0.5rem 0;
    }
  }

  .prev-and-next-posts {
    max-width: $articleWidth;
    width: 100%;
    padding: 0 1.5rem 1.5rem 1.5rem;
    box-sizing: border-box;
    margin: auto;
    display: flex;
    gap: 1.5rem;

    a {
      flex: 1;
      display: block;
      padding: 1rem;
      border-radius: 0.6rem;
      background-color: rgba(var(--bg-2-rgb), 1);
      color: var(--text-color-2);
      text-decoration: none;

      &:hover span {
        color: var(--accent-1);
      }

      span {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
        transition: color 200ms;
      }
    }
  }

  @media only screen and (max-width: 1300px) {
    .toc {
      display: none;
    }
  }
</style>
