---
import type { MarkdownHeading } from "astro";
import TableOfContentsHeading from "./TableOfContentsHeading.astro";
const { headings } = Astro.props;
const toc = buildToc(headings);

export type TocHeading = {
    depth: number;
    text: string;
    slug: string;
    subheadings: TocHeading[];
};

function buildToc(headings: MarkdownHeading[]): TocHeading[] {
    const toc: TocHeading[] = [];
    const parentHeadings = new Map();
    headings.forEach((h) => {
        const heading = { ...h, subheadings: [] };
        parentHeadings.set(heading.depth, heading);
        // Change 2 to 1 if your markdown includes your <h1>
        if (heading.depth === 2) {
            toc.push(heading);
        } else {
            parentHeadings.get(heading.depth - 1).subheadings.push(heading);
        }
    });
    return toc;
}
---

<nav class="toc">
    <strong>Table of contents</strong>
    <ul>
        {toc.map((heading) => <TableOfContentsHeading heading={heading} />)}
    </ul>
</nav>

<style lang="scss">
    .toc {
        background-color: var(--bg-2);
        padding: 1rem;
        border-radius: 0.5rem;
    }
    strong {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 1.1em;
        font-weight: bold;
        color: var(--text-color-1);
    }
    ul {
        display: flex;
        flex-direction: column;
        gap: 0.2rem;
        padding: 0;
        margin: 0;
        list-style: none;

        :global(a) {
            color: var(--text-color-1);
        }
    }
    :global(.toc ul > li > ul) {
        display: flex;
        flex-direction: column;
        gap: 0.1rem;
        padding-left: 1rem;
        margin: 0;
        list-style: none;
        font-size: 0.9em;

        :global(a) {
            color: var(--text-color-2);
        }
    }
</style>
