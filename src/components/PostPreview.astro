---
import { Image } from '@astrojs/image/components';
import type { MarkdownInstance } from 'astro';
import type { Post } from '../types';
import Tag from './Tag.astro';

const post: MarkdownInstance<Post> = Astro.props.post;
const description = post.frontmatter.description ?? getDescriptionFromPostContent();
// For example: Dec 06
const formattedDate = new Date(post.frontmatter.createdAt).toLocaleDateString('en-US', {
  month: 'short',
  day: '2-digit',
});

function getDescriptionFromPostContent(): string {
  const maxLength = 160;
  const rawText = post.compiledContent().replace(/<\/?[^>]+(>|$)/g, '');

  // Return the raw text content of the post if its lenght doesn't exceed the description's max length.
  if (rawText.length <= maxLength) {
    return rawText;
  }

  // Truncate the text to the last word within the length limit and add dots to show that the text continues.
  const truncated = rawText.slice(0, 160);
  return truncated.substring(0, truncated.lastIndexOf(' ')) + 'â€¦';
}
---

<li class="post-preview">
  <time datetime={post.frontmatter.createdAt?.toString()}>{formattedDate}</time>

  <div>
    <div class="preview-content">
      <h2 class="title">
        <a href={post.url}>
          {post.frontmatter.title}
        </a>
      </h2>

      {
        post.frontmatter.tags && (
          <ul class="tags">
            {post.frontmatter.tags.map((tag) => (
              <Tag name={tag} type="blog" />
            ))}
          </ul>
        )
      }

      <p class="description">
        <a href={post.url}>
          {description}
        </a>
      </p>
    </div>

    {
      post.frontmatter.thumbnail && (
        <a class="thumbnail" href={post.url}>
          <Image
            src={post.frontmatter.thumbnail.src}
            alt={post.frontmatter.thumbnail.alt}
            width={post.frontmatter.thumbnail.width}
            height={post.frontmatter.thumbnail.height}
            format={post.frontmatter.thumbnail.format}
            aspectRatio={post.frontmatter.thumbnail.aspectRatio}
          />
        </a>
      )
    }
  </div>
</li>

<style lang="scss">
  $gap: 1rem;
  $borderRadius: 0.6rem;
  $timeLabelWidth: 6ch;

  .post-preview {
    list-style: none;
    display: flex;
    overflow: hidden;
    gap: $gap;

    a {
      color: initial;
      text-decoration: none;
    }

    ul.tags {
      display: flex;
      padding: 0 1rem;
      margin: 0.25rem 0;
      gap: 2ch;
      flex-wrap: wrap;
    }
  }

  time {
    margin-top: 1rem;
    font-size: 1.2em;
    opacity: 0.5;
    font-family: monospace;
    display: block;
    min-width: $timeLabelWidth;
  }

  .post-preview > div {
    flex: 1;
    display: flex;
    gap: 1rem;
    width: calc(100% - $timeLabelWidth - $gap); // The full width minus the width of the time label
    box-sizing: border-box;
  }

  .preview-content {
    flex: 1;
    padding: 1rem 0;
    text-decoration: none;
    border-radius: $borderRadius;
    background-color: white;
    color: #111;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;

    h2.title,
    p.description {
      padding: 0 1rem;
      margin: 0;
      box-sizing: border-box;
    }
  }

  .thumbnail {
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
    border-radius: $borderRadius;
    max-width: calc(50% - $gap / 2); // Half of the parent's size
    height: 100%;

    img {
      width: auto;
      height: 100%;
      max-height: 16rem;
      border-radius: $borderRadius;
      margin: 0;
      padding: 0;
    }
  }

  h2.title {
    margin: 0;
    font-size: 1.25rem;
  }

  p.description {
    margin-top: 0.5rem;
    margin-bottom: 0;
    color: #444;
  }

  @media only screen and (max-width: 640px) {
    .post-preview > div {
      flex-direction: column;
    }

    .thumbnail {
      max-width: 100%;
      height: auto;
    }
  }
</style>
